// Mocks generated by Mockito 5.4.6 from annotations
// in hotel_app/test/features/admin/presentation/provider/update_booking_status_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hotel_app/core/base_response.dart' as _i2;
import 'package:hotel_app/features/admin/data/hotel_owner_repository.dart'
    as _i3;
import 'package:hotel_app/features/admin/model/booking_details_dto.dart'
    as _i12;
import 'package:hotel_app/features/admin/model/booking_dto.dart' as _i15;
import 'package:hotel_app/features/admin/model/booking_stats_dto.dart' as _i6;
import 'package:hotel_app/features/admin/model/booking_status.dart' as _i13;
import 'package:hotel_app/features/admin/model/create_room_request.dart' as _i9;
import 'package:hotel_app/features/admin/model/hotel_response.dart' as _i5;
import 'package:hotel_app/features/admin/model/put_room_request.dart' as _i11;
import 'package:hotel_app/features/admin/model/review_response_dto.dart'
    as _i14;
import 'package:hotel_app/features/admin/model/review_stats_dto.dart' as _i7;
import 'package:hotel_app/features/admin/model/room_response_dto.dart' as _i8;
import 'package:image_picker/image_picker.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseResponse_0<T> extends _i1.SmartFake
    implements _i2.BaseResponse<T> {
  _FakeBaseResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HotelRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelRepository extends _i1.Mock implements _i3.HotelRepository {
  MockHotelRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BaseResponse<_i5.Hotel>> getHotelInfo() => (super.noSuchMethod(
        Invocation.method(
          #getHotelInfo,
          [],
        ),
        returnValue: _i4.Future<_i2.BaseResponse<_i5.Hotel>>.value(
            _FakeBaseResponse_0<_i5.Hotel>(
          this,
          Invocation.method(
            #getHotelInfo,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<_i5.Hotel>>);

  @override
  _i4.Future<_i2.BaseResponse<List<_i6.BookingStatsDto>>> getBookingStats() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingStats,
          [],
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<List<_i6.BookingStatsDto>>>.value(
                _FakeBaseResponse_0<List<_i6.BookingStatsDto>>(
          this,
          Invocation.method(
            #getBookingStats,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<List<_i6.BookingStatsDto>>>);

  @override
  _i4.Future<_i2.BaseResponse<_i7.ReviewStatsDto>> getReviewStats() =>
      (super.noSuchMethod(
        Invocation.method(
          #getReviewStats,
          [],
        ),
        returnValue: _i4.Future<_i2.BaseResponse<_i7.ReviewStatsDto>>.value(
            _FakeBaseResponse_0<_i7.ReviewStatsDto>(
          this,
          Invocation.method(
            #getReviewStats,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<_i7.ReviewStatsDto>>);

  @override
  _i4.Future<_i2.BaseResponse<List<_i8.RoomResponseDto>>> getAllRooms({
    int? offset = 0,
    int? limit = 10,
    String? order = 'desc',
    String? query = '',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRooms,
          [],
          {
            #offset: offset,
            #limit: limit,
            #order: order,
            #query: query,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<List<_i8.RoomResponseDto>>>.value(
                _FakeBaseResponse_0<List<_i8.RoomResponseDto>>(
          this,
          Invocation.method(
            #getAllRooms,
            [],
            {
              #offset: offset,
              #limit: limit,
              #order: order,
              #query: query,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<List<_i8.RoomResponseDto>>>);

  @override
  _i4.Future<_i2.BaseResponse<bool>> createRoomWithImages({
    required _i9.CreateRoomRequest? request,
    required _i10.XFile? mainImage,
    List<_i10.XFile>? extraImages,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRoomWithImages,
          [],
          {
            #request: request,
            #mainImage: mainImage,
            #extraImages: extraImages,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<bool>>.value(_FakeBaseResponse_0<bool>(
          this,
          Invocation.method(
            #createRoomWithImages,
            [],
            {
              #request: request,
              #mainImage: mainImage,
              #extraImages: extraImages,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<bool>>);

  @override
  _i4.Future<_i2.BaseResponse<bool>> updateRoomWithImages({
    required _i11.PutRoomRequest? request,
    required _i10.XFile? mainImage,
    List<_i10.XFile>? extraImages,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRoomWithImages,
          [],
          {
            #request: request,
            #mainImage: mainImage,
            #extraImages: extraImages,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<bool>>.value(_FakeBaseResponse_0<bool>(
          this,
          Invocation.method(
            #updateRoomWithImages,
            [],
            {
              #request: request,
              #mainImage: mainImage,
              #extraImages: extraImages,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<bool>>);

  @override
  _i4.Future<_i2.BaseResponse<_i12.BookingDetailsDto>> getBookingDetails(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingDetails,
          [id],
        ),
        returnValue: _i4.Future<_i2.BaseResponse<_i12.BookingDetailsDto>>.value(
            _FakeBaseResponse_0<_i12.BookingDetailsDto>(
          this,
          Invocation.method(
            #getBookingDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<_i12.BookingDetailsDto>>);

  @override
  _i4.Future<_i2.BaseResponse<bool>> updateBookingStatus(
    int? id,
    _i13.BookingStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBookingStatus,
          [
            id,
            status,
          ],
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<bool>>.value(_FakeBaseResponse_0<bool>(
          this,
          Invocation.method(
            #updateBookingStatus,
            [
              id,
              status,
            ],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<bool>>);

  @override
  _i4.Future<_i2.BaseResponse<int>> countRooms() => (super.noSuchMethod(
        Invocation.method(
          #countRooms,
          [],
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<int>>.value(_FakeBaseResponse_0<int>(
          this,
          Invocation.method(
            #countRooms,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<int>>);

  @override
  _i4.Future<_i2.BaseResponse<int>> countBookings() => (super.noSuchMethod(
        Invocation.method(
          #countBookings,
          [],
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<int>>.value(_FakeBaseResponse_0<int>(
          this,
          Invocation.method(
            #countBookings,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<int>>);

  @override
  _i4.Future<_i2.BaseResponse<List<_i14.ReviewResponseDto>>> getAllReviews({
    int? offset = 0,
    int? limit = 10,
    String? order = 'desc',
    String? query = '',
    int? rating,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllReviews,
          [],
          {
            #offset: offset,
            #limit: limit,
            #order: order,
            #query: query,
            #rating: rating,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<List<_i14.ReviewResponseDto>>>.value(
                _FakeBaseResponse_0<List<_i14.ReviewResponseDto>>(
          this,
          Invocation.method(
            #getAllReviews,
            [],
            {
              #offset: offset,
              #limit: limit,
              #order: order,
              #query: query,
              #rating: rating,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<List<_i14.ReviewResponseDto>>>);

  @override
  _i4.Future<_i2.BaseResponse<bool>> replyToReview(
    int? reviewId,
    String? reply,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #replyToReview,
          [
            reviewId,
            reply,
          ],
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<bool>>.value(_FakeBaseResponse_0<bool>(
          this,
          Invocation.method(
            #replyToReview,
            [
              reviewId,
              reply,
            ],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<bool>>);

  @override
  _i4.Future<_i2.BaseResponse<bool>> deleteRoom(int? roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRoom,
          [roomId],
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<bool>>.value(_FakeBaseResponse_0<bool>(
          this,
          Invocation.method(
            #deleteRoom,
            [roomId],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<bool>>);

  @override
  _i4.Future<_i2.BaseResponse<bool>> checkRoomHasBookings(int? roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkRoomHasBookings,
          [roomId],
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<bool>>.value(_FakeBaseResponse_0<bool>(
          this,
          Invocation.method(
            #checkRoomHasBookings,
            [roomId],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<bool>>);

  @override
  _i4.Future<_i2.BaseResponse<List<_i15.BookingResponseDto>>> getAllBookings({
    int? offset = 0,
    int? limit = 10,
    String? order = 'desc',
    String? query = '',
    String? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllBookings,
          [],
          {
            #offset: offset,
            #limit: limit,
            #order: order,
            #query: query,
            #status: status,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResponse<List<_i15.BookingResponseDto>>>.value(
                _FakeBaseResponse_0<List<_i15.BookingResponseDto>>(
          this,
          Invocation.method(
            #getAllBookings,
            [],
            {
              #offset: offset,
              #limit: limit,
              #order: order,
              #query: query,
              #status: status,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<List<_i15.BookingResponseDto>>>);
}
